{"ast":null,"code":"var _jsxFileName = \"/Users/denizozay/Documents/GitHub/cs458project/frontend/src/SurveyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../services/firebaseConfig';\nimport { collection, getDocs } from 'firebase/firestore';\nimport SurveyBuilder from './SurveyBuilder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurveyPage = () => {\n  _s();\n  const [surveys, setSurveys] = useState([]);\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n\n  // Fetch existing surveys\n  useEffect(() => {\n    const fetchSurveys = async () => {\n      try {\n        const surveysCollection = collection(db, 'surveys');\n        const surveySnapshot = await getDocs(surveysCollection);\n        const surveyList = surveySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setSurveys(surveyList);\n      } catch (error) {\n        console.error('Error fetching surveys:', error);\n      }\n    };\n    fetchSurveys();\n  }, []);\n\n  // Handle response input\n  const handleResponseChange = (questionIndex, value) => {\n    setResponses({\n      ...responses,\n      [questionIndex]: value\n    });\n  };\n\n  // Render survey questions\n  const renderSurveyQuestions = () => {\n    if (!selectedSurvey) return null;\n    return selectedSurvey.questions.map((question, index) => {\n      switch (question.type) {\n        case 'multiple-choice':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `question-${index}`,\n                value: option,\n                checked: responses[index] === option,\n                onChange: () => handleResponseChange(index, option)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this), option]\n            }, optIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this))]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this);\n        case 'rating-scale':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"1\",\n              max: question.max || 5,\n              value: responses[index] || 1,\n              onChange: e => handleResponseChange(index, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Rating: \", responses[index] || 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this);\n        case 'conditional':\n          // Only show if condition is met\n          const shouldShowQuestion = question.condition && responses[selectedSurvey.questions.findIndex(q => q.text === question.dependsOn)] === question.condition;\n          if (!shouldShowQuestion) return null;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: responses[index] || '',\n              onChange: e => handleResponseChange(index, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this);\n        default:\n          return null;\n      }\n    });\n  };\n\n  // Submit survey responses\n  const submitSurveyResponse = async () => {\n    try {\n      // Add response submission logic to Firestore\n      await addDoc(collection(db, 'survey-responses'), {\n        surveyId: selectedSurvey.id,\n        responses,\n        submittedAt: new Date()\n      });\n      alert('Survey submitted successfully!');\n      // Reset form\n      setResponses({});\n      setSelectedSurvey(null);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      alert('Failed to submit survey');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Survey Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"survey-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Surveys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), surveys.map((survey, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedSurvey(survey),\n        children: [\"Survey \", index + 1]\n      }, survey.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyBuilder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), selectedSurvey && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-survey\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Take Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), renderSurveyQuestions(), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitSurveyResponse,\n        children: \"Submit Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(SurveyPage, \"rTkrB9EJ2mDt4LhmcHSskdzO3rw=\");\n_c = SurveyPage;\nexport default SurveyPage;\nvar _c;\n$RefreshReg$(_c, \"SurveyPage\");","map":{"version":3,"names":["React","useState","useEffect","db","collection","getDocs","SurveyBuilder","jsxDEV","_jsxDEV","SurveyPage","_s","surveys","setSurveys","selectedSurvey","setSelectedSurvey","responses","setResponses","fetchSurveys","surveysCollection","surveySnapshot","surveyList","docs","map","doc","id","data","error","console","handleResponseChange","questionIndex","value","renderSurveyQuestions","questions","question","index","type","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","options","option","optIndex","name","checked","onChange","min","max","e","target","shouldShowQuestion","condition","findIndex","q","dependsOn","submitSurveyResponse","addDoc","surveyId","submittedAt","Date","alert","survey","onClick","_c","$RefreshReg$"],"sources":["/Users/denizozay/Documents/GitHub/cs458project/frontend/src/SurveyPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from '../services/firebaseConfig';\nimport { collection, getDocs } from 'firebase/firestore';\nimport SurveyBuilder from './SurveyBuilder';\n\nconst SurveyPage = () => {\n  const [surveys, setSurveys] = useState([]);\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n\n  // Fetch existing surveys\n  useEffect(() => {\n    const fetchSurveys = async () => {\n      try {\n        const surveysCollection = collection(db, 'surveys');\n        const surveySnapshot = await getDocs(surveysCollection);\n        const surveyList = surveySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setSurveys(surveyList);\n      } catch (error) {\n        console.error('Error fetching surveys:', error);\n      }\n    };\n\n    fetchSurveys();\n  }, []);\n\n  // Handle response input\n  const handleResponseChange = (questionIndex, value) => {\n    setResponses({\n      ...responses,\n      [questionIndex]: value\n    });\n  };\n\n  // Render survey questions\n  const renderSurveyQuestions = () => {\n    if (!selectedSurvey) return null;\n\n    return selectedSurvey.questions.map((question, index) => {\n      switch (question.type) {\n        case 'multiple-choice':\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text}</p>\n              {question.options.map((option, optIndex) => (\n                <label key={optIndex}>\n                  <input\n                    type=\"radio\"\n                    name={`question-${index}`}\n                    value={option}\n                    checked={responses[index] === option}\n                    onChange={() => handleResponseChange(index, option)}\n                  />\n                  {option}\n                </label>\n              ))}\n            </div>\n          );\n\n        case 'rating-scale':\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text}</p>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max={question.max || 5}\n                value={responses[index] || 1}\n                onChange={(e) => handleResponseChange(index, e.target.value)}\n              />\n              <span>Rating: {responses[index] || 1}</span>\n            </div>\n          );\n\n        case 'conditional':\n          // Only show if condition is met\n          const shouldShowQuestion = question.condition && \n            responses[selectedSurvey.questions.findIndex(q => q.text === question.dependsOn)] === question.condition;\n          \n          if (!shouldShowQuestion) return null;\n\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text}</p>\n              <input\n                type=\"text\"\n                value={responses[index] || ''}\n                onChange={(e) => handleResponseChange(index, e.target.value)}\n              />\n            </div>\n          );\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  // Submit survey responses\n  const submitSurveyResponse = async () => {\n    try {\n      // Add response submission logic to Firestore\n      await addDoc(collection(db, 'survey-responses'), {\n        surveyId: selectedSurvey.id,\n        responses,\n        submittedAt: new Date()\n      });\n\n      alert('Survey submitted successfully!');\n      // Reset form\n      setResponses({});\n      setSelectedSurvey(null);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      alert('Failed to submit survey');\n    }\n  };\n\n  return (\n    <div className=\"survey-page\">\n      <h1>Survey Management</h1>\n\n      {/* Survey Selection */}\n      <div className=\"survey-selection\">\n        <h2>Available Surveys</h2>\n        {surveys.map((survey, index) => (\n          <button \n            key={survey.id}\n            onClick={() => setSelectedSurvey(survey)}\n          >\n            Survey {index + 1}\n          </button>\n        ))}\n      </div>\n\n      {/* Survey Builder Component */}\n      <SurveyBuilder />\n\n      {/* Selected Survey Rendering */}\n      {selectedSurvey && (\n        <div className=\"selected-survey\">\n          <h2>Take Survey</h2>\n          {renderSurveyQuestions()}\n          <button onClick={submitSurveyResponse}>\n            Submit Survey\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SurveyPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}