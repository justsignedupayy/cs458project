{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getAnalytics } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjE1uvLm11OkSZ1EEHwlFatphAcHUelGE\",\n  authDomain: \"cs458-c77f5.firebaseapp.com\",\n  projectId: \"cs458-c77f5\",\n  storageBucket: \"cs458-c77f5.firebasestorage.app\",\n  messagingSenderId: \"273785606312\",\n  appId: \"1:273785606312:web:5ef6665350622390c2f29d\",\n  measurementId: \"G-003GYRGNNK\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\nexport const db = getFirestore(app);\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const token = await result.user.getIdToken();\n    const response = await fetch(\"http://localhost:8000/verifyToken\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token\n      })\n    });\n    const data = await response.json();\n    console.log(\"User signed in with Google:\", result.user);\n    console.log(data);\n  } catch (error) {\n    console.error(\"Google Sign-In Error:\", error);\n  }\n};\nexport const signInWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log(\"User signed in:\", userCredential.user);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    let errorMessage = \"An unknown error occurred.\";\n\n    // Check Firebase's raw error message\n    if (error.code === \"auth/invalid-credential\") {\n      errorMessage = \"Invalid email or password. Please try again.\";\n    } else {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          errorMessage = \"No account found with this email.\";\n          break;\n        case \"auth/wrong-password\":\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case \"auth/invalid-email\":\n          errorMessage = \"Invalid email format.\";\n          break;\n        case \"auth/too-many-requests\":\n          errorMessage = \"Too many failed attempts. Try again later.\";\n          break;\n        case \"auth/network-request-failed\":\n          errorMessage = \"Network error. Please check your connection.\";\n          break;\n        default:\n          errorMessage = error.message;\n      }\n    }\n    console.error(\"Email/Password Sign-In Error:\", errorMessage);\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signInWithEmailAndPassword","getFirestore","getAnalytics","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","googleProvider","db","signInWithGoogle","result","token","user","getIdToken","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","error","signInWithEmail","email","password","Error","userCredential","success","errorMessage","code","message"],"sources":["/Users/osman/Documents/projects/c458p1/frontend/src/firebase-config.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjE1uvLm11OkSZ1EEHwlFatphAcHUelGE\",\n  authDomain: \"cs458-c77f5.firebaseapp.com\",\n  projectId: \"cs458-c77f5\",\n  storageBucket: \"cs458-c77f5.firebasestorage.app\",\n  messagingSenderId: \"273785606312\",\n  appId: \"1:273785606312:web:5ef6665350622390c2f29d\",\n  measurementId: \"G-003GYRGNNK\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\nexport const db = getFirestore(app);\n\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const token = await result.user.getIdToken();\n\n    const response = await fetch(\"http://localhost:8000/verifyToken\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ token }),\n    });\n\n    const data = await response.json();\n    console.log(\"User signed in with Google:\", result.user);\n    console.log(data);\n  } catch (error) {\n    console.error(\"Google Sign-In Error:\", error);\n  }\n};\n\nexport const signInWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log(\"User signed in:\", userCredential.user);\n    return { success: true, user: userCredential.user };\n  } catch (error) {\n    let errorMessage = \"An unknown error occurred.\";\n\n    // Check Firebase's raw error message\n    if (error.code === \"auth/invalid-credential\") {\n      errorMessage = \"Invalid email or password. Please try again.\";\n    } else {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          errorMessage = \"No account found with this email.\";\n          break;\n        case \"auth/wrong-password\":\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case \"auth/invalid-email\":\n          errorMessage = \"Invalid email format.\";\n          break;\n        case \"auth/too-many-requests\":\n          errorMessage = \"Too many failed attempts. Try again later.\";\n          break;\n        case \"auth/network-request-failed\":\n          errorMessage = \"Network error. Please check your connection.\";\n          break;\n        default:\n          errorMessage = error.message;\n      }\n    }\n\n    console.error(\"Email/Password Sign-In Error:\", errorMessage);\n    return { success: false, error: errorMessage };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}