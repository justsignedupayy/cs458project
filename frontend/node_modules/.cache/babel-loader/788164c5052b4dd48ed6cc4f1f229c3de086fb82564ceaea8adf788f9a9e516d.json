{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';\nimport { getFirestore, collection, addDoc, query, getDocs, where } from 'firebase/firestore';\n\n// Your Firebase configuration object\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjE1uvLm11OkSZ1EEHwlFatphAcHUelGE\",\n  authDomain: \"cs458-c77f5.firebaseapp.com\",\n  projectId: \"cs458-c77f5\",\n  storageBucket: \"cs458-c77f5.firebasestorage.app\",\n  messagingSenderId: \"273785606312\",\n  appId: \"1:273785606312:web:5ef6665350622390c2f29d\",\n  measurementId: \"G-003GYRGNNK\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Authentication functions\nconst signInWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log(\"User signed in:\", userCredential.user);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    let errorMessage = \"An unknown error occurred.\";\n\n    // Check Firebase's raw error message\n    if (error.code === \"auth/invalid-credential\") {\n      errorMessage = \"Invalid email or password. Please try again.\";\n    } else {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          errorMessage = \"No account found with this email.\";\n          break;\n        case \"auth/wrong-password\":\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case \"auth/invalid-email\":\n          errorMessage = \"Invalid email format.\";\n          break;\n        case \"auth/too-many-requests\":\n          errorMessage = \"Too many failed attempts. Try again later.\";\n          break;\n        case \"auth/network-request-failed\":\n          errorMessage = \"Network error. Please check your connection.\";\n          break;\n        default:\n          errorMessage = error.message;\n      }\n    }\n    console.error(\"Email/Password Sign-In Error:\", errorMessage);\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\nconst registerWithEmail = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nconst resetPassword = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Survey-related functions\nconst getSurveys = async () => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const q = query(surveysRef);\n    const querySnapshot = await getDocs(q);\n    const surveys = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    return {\n      success: true,\n      surveys\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nconst addSurvey = async surveyData => {\n  try {\n    const docRef = await addDoc(collection(db, 'surveys'), surveyData);\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport { auth, db, googleProvider, signInWithEmail, registerWithEmail, resetPassword, getSurveys, addSurvey, collection, addDoc };\nexport const deleteSurvey = async surveyId => {\n  try {\n    await deleteDoc(doc(db, \"surveys\", surveyId));\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","getFirestore","collection","addDoc","query","getDocs","where","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithEmail","email","password","Error","userCredential","console","log","user","success","error","errorMessage","code","message","registerWithEmail","resetPassword","getSurveys","surveysRef","q","querySnapshot","surveys","docs","map","doc","id","data","addSurvey","surveyData","docRef","deleteSurvey","surveyId","deleteDoc"],"sources":["/Users/osman/Documents/projects/c458p1/frontend/src/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail\n} from 'firebase/auth';\nimport {\n  getFirestore,\n  collection,\n  addDoc,\n  query,\n  getDocs,\n  where\n} from 'firebase/firestore';\n\n// Your Firebase configuration object\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjE1uvLm11OkSZ1EEHwlFatphAcHUelGE\",\n  authDomain: \"cs458-c77f5.firebaseapp.com\",\n  projectId: \"cs458-c77f5\",\n  storageBucket: \"cs458-c77f5.firebasestorage.app\",\n  messagingSenderId: \"273785606312\",\n  appId: \"1:273785606312:web:5ef6665350622390c2f29d\",\n  measurementId: \"G-003GYRGNNK\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Authentication functions\nconst signInWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log(\"User signed in:\", userCredential.user);\n    return { success: true, user: userCredential.user };\n  } catch (error) {\n    let errorMessage = \"An unknown error occurred.\";\n\n    // Check Firebase's raw error message\n    if (error.code === \"auth/invalid-credential\") {\n      errorMessage = \"Invalid email or password. Please try again.\";\n    } else {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          errorMessage = \"No account found with this email.\";\n          break;\n        case \"auth/wrong-password\":\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case \"auth/invalid-email\":\n          errorMessage = \"Invalid email format.\";\n          break;\n        case \"auth/too-many-requests\":\n          errorMessage = \"Too many failed attempts. Try again later.\";\n          break;\n        case \"auth/network-request-failed\":\n          errorMessage = \"Network error. Please check your connection.\";\n          break;\n        default:\n          errorMessage = error.message;\n      }\n    }\n\n    console.error(\"Email/Password Sign-In Error:\", errorMessage);\n    return { success: false, error: errorMessage };\n  }\n};\n\nconst registerWithEmail = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\nconst resetPassword = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return { success: true };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Survey-related functions\nconst getSurveys = async () => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const q = query(surveysRef);\n    const querySnapshot = await getDocs(q);\n\n    const surveys = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    return {\n      success: true,\n      surveys\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\nconst addSurvey = async (surveyData) => {\n  try {\n    const docRef = await addDoc(collection(db, 'surveys'), surveyData);\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\nexport {\n  auth,\n  db,\n  googleProvider,\n  signInWithEmail,\n  registerWithEmail,\n  resetPassword,\n  getSurveys,\n  addSurvey,\n  collection,\n  addDoc\n};\n\nexport const deleteSurvey = async (surveyId) => {\n  try {\n    await deleteDoc(doc(db, \"surveys\", surveyId));\n    return { success: true };\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n};"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,sBAAsB,QACjB,eAAe;AACtB,SACEC,YAAY,EACZC,UAAU,EACVC,MAAM,EACNC,KAAK,EACLC,OAAO,EACPC,KAAK,QACA,oBAAoB;;AAE3B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,6BAA6B;EACzCC,SAAS,EAAE,aAAa;EACxBC,aAAa,EAAE,iCAAiC;EAChDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGpB,aAAa,CAACY,cAAc,CAAC;AACzC,MAAMS,IAAI,GAAGpB,OAAO,CAACmB,GAAG,CAAC;AACzB,MAAME,EAAE,GAAGhB,YAAY,CAACc,GAAG,CAAC;AAC5B,MAAMG,cAAc,GAAG,IAAIrB,kBAAkB,CAAC,CAAC;;AAE/C;AACA,MAAMsB,eAAe,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACjD,IAAI;IACF,IAAI,CAACD,KAAK,IAAI,CAACC,QAAQ,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,MAAMC,cAAc,GAAG,MAAMzB,0BAA0B,CAACkB,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;IAC9EG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,cAAc,CAACG,IAAI,CAAC;IACnD,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAED,IAAI,EAAEH,cAAc,CAACG;IAAK,CAAC;EACrD,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,IAAIC,YAAY,GAAG,4BAA4B;;IAE/C;IACA,IAAID,KAAK,CAACE,IAAI,KAAK,yBAAyB,EAAE;MAC5CD,YAAY,GAAG,8CAA8C;IAC/D,CAAC,MAAM;MACL,QAAQD,KAAK,CAACE,IAAI;QAChB,KAAK,qBAAqB;UACxBD,YAAY,GAAG,mCAAmC;UAClD;QACF,KAAK,qBAAqB;UACxBA,YAAY,GAAG,uCAAuC;UACtD;QACF,KAAK,oBAAoB;UACvBA,YAAY,GAAG,uBAAuB;UACtC;QACF,KAAK,wBAAwB;UAC3BA,YAAY,GAAG,4CAA4C;UAC3D;QACF,KAAK,6BAA6B;UAChCA,YAAY,GAAG,8CAA8C;UAC7D;QACF;UACEA,YAAY,GAAGD,KAAK,CAACG,OAAO;MAChC;IACF;IAEAP,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEC,YAAY,CAAC;IAC5D,OAAO;MAAEF,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAEC;IAAa,CAAC;EAChD;AACF,CAAC;AAED,MAAMG,iBAAiB,GAAG,MAAAA,CAAOZ,KAAK,EAAEC,QAAQ,KAAK;EACnD,IAAI;IACF,MAAME,cAAc,GAAG,MAAMxB,8BAA8B,CAACiB,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;IAClF,OAAO;MACLM,OAAO,EAAE,IAAI;MACbD,IAAI,EAAEH,cAAc,CAACG;IACvB,CAAC;EACH,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAO;MACLD,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF,CAAC;AAED,MAAME,aAAa,GAAG,MAAOb,KAAK,IAAK;EACrC,IAAI;IACF,MAAMpB,sBAAsB,CAACgB,IAAI,EAAEI,KAAK,CAAC;IACzC,OAAO;MAAEO,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MACLD,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF,CAAC;;AAED;AACA,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACF,MAAMC,UAAU,GAAGjC,UAAU,CAACe,EAAE,EAAE,SAAS,CAAC;IAC5C,MAAMmB,CAAC,GAAGhC,KAAK,CAAC+B,UAAU,CAAC;IAC3B,MAAME,aAAa,GAAG,MAAMhC,OAAO,CAAC+B,CAAC,CAAC;IAEtC,MAAME,OAAO,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;MAC7CC,EAAE,EAAED,GAAG,CAACC,EAAE;MACV,GAAGD,GAAG,CAACE,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,OAAO;MACLhB,OAAO,EAAE,IAAI;MACbW;IACF,CAAC;EACH,CAAC,CAAC,OAAOV,KAAK,EAAE;IACd,OAAO;MACLD,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF,CAAC;AAED,MAAMa,SAAS,GAAG,MAAOC,UAAU,IAAK;EACtC,IAAI;IACF,MAAMC,MAAM,GAAG,MAAM3C,MAAM,CAACD,UAAU,CAACe,EAAE,EAAE,SAAS,CAAC,EAAE4B,UAAU,CAAC;IAClE,OAAO;MACLlB,OAAO,EAAE,IAAI;MACbe,EAAE,EAAEI,MAAM,CAACJ;IACb,CAAC;EACH,CAAC,CAAC,OAAOd,KAAK,EAAE;IACd,OAAO;MACLD,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF,CAAC;AAED,SACEf,IAAI,EACJC,EAAE,EACFC,cAAc,EACdC,eAAe,EACfa,iBAAiB,EACjBC,aAAa,EACbC,UAAU,EACVU,SAAS,EACT1C,UAAU,EACVC,MAAM;AAGR,OAAO,MAAM4C,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,SAAS,CAACR,GAAG,CAACxB,EAAE,EAAE,SAAS,EAAE+B,QAAQ,CAAC,CAAC;IAC7C,OAAO;MAAErB,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAED,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAEA,KAAK,CAACG;IAAQ,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}