{"ast":null,"code":"var _jsxFileName = \"/Users/osman/Documents/projects/c458p1/frontend/src/SurveyBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { addSurvey } from './firebaseConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurveyBuilder = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [validationError, setValidationError] = useState(null);\n  const [surveyTitle, setSurveyTitle] = useState('');\n\n  // Question type interfaces\n  const addMultipleChoiceQuestion = () => {\n    const newQuestion = {\n      type: 'multiple-choice',\n      text: '',\n      options: ['', ''],\n      required: false\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n  const addRatingScaleQuestion = () => {\n    const newQuestion = {\n      type: 'rating-scale',\n      text: '',\n      min: 1,\n      max: 5,\n      required: false\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n  const addConditionalQuestion = () => {\n    const newQuestion = {\n      type: 'conditional',\n      text: '',\n      condition: null,\n      dependsOn: null,\n      required: false\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n  const updateQuestion = (index, updates) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = {\n      ...updatedQuestions[index],\n      ...updates\n    };\n    setQuestions(updatedQuestions);\n  };\n\n  // --- Missing Functions Start ---\n\n  const removeQuestion = indexToRemove => {\n    const updatedQuestions = questions.filter((_, index) => index !== indexToRemove);\n    setQuestions(updatedQuestions);\n  };\n  const updateQuestionOption = (questionIndex, optionIndex, newOption) => {\n    var _updatedQuestions$que;\n    const updatedQuestions = [...questions];\n    if ((_updatedQuestions$que = updatedQuestions[questionIndex]) !== null && _updatedQuestions$que !== void 0 && _updatedQuestions$que.options) {\n      updatedQuestions[questionIndex].options[optionIndex] = newOption;\n      setQuestions(updatedQuestions);\n    }\n  };\n  const addQuestionOption = questionIndex => {\n    var _updatedQuestions$que2;\n    const updatedQuestions = [...questions];\n    if ((_updatedQuestions$que2 = updatedQuestions[questionIndex]) !== null && _updatedQuestions$que2 !== void 0 && _updatedQuestions$que2.options) {\n      updatedQuestions[questionIndex].options.push('');\n      setQuestions(updatedQuestions);\n    }\n  };\n  const removeQuestionOption = (questionIndex, optionIndex) => {\n    var _updatedQuestions$que3, _updatedQuestions$que4, _updatedQuestions$que5;\n    const updatedQuestions = [...questions];\n    if ((_updatedQuestions$que3 = updatedQuestions[questionIndex]) !== null && _updatedQuestions$que3 !== void 0 && _updatedQuestions$que3.options && updatedQuestions[questionIndex].options.length > 2) {\n      updatedQuestions[questionIndex].options = updatedQuestions[questionIndex].options.filter((_, index) => index !== optionIndex);\n      setQuestions(updatedQuestions);\n    } else if (((_updatedQuestions$que4 = updatedQuestions[questionIndex]) === null || _updatedQuestions$que4 === void 0 ? void 0 : (_updatedQuestions$que5 = _updatedQuestions$que4.options) === null || _updatedQuestions$que5 === void 0 ? void 0 : _updatedQuestions$que5.length) <= 2) {\n      alert(\"Multiple choice questions must have at least two options.\");\n    }\n  };\n  const updateConditionalQuestionDependency = (questionIndex, dependency) => {\n    var _updatedQuestions$que6;\n    const updatedQuestions = [...questions];\n    if (((_updatedQuestions$que6 = updatedQuestions[questionIndex]) === null || _updatedQuestions$que6 === void 0 ? void 0 : _updatedQuestions$que6.type) === 'conditional') {\n      updatedQuestions[questionIndex].dependsOn = dependency;\n      setQuestions(updatedQuestions);\n    }\n  };\n  const updateConditionalQuestionCondition = (questionIndex, condition) => {\n    var _updatedQuestions$que7;\n    const updatedQuestions = [...questions];\n    if (((_updatedQuestions$que7 = updatedQuestions[questionIndex]) === null || _updatedQuestions$que7 === void 0 ? void 0 : _updatedQuestions$que7.type) === 'conditional') {\n      updatedQuestions[questionIndex].condition = condition;\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  // --- Missing Functions End ---\n\n  const validateSurvey = () => {\n    // Basic validation\n    if (!surveyTitle.trim()) {\n      setValidationError('Survey must have a title');\n      return false;\n    }\n    const requiredQuestionsMissing = questions.some(q => q.required && (!q.text || q.text.trim() === ''));\n    if (requiredQuestionsMissing) {\n      setValidationError('Please fill in all required questions');\n      return false;\n    }\n    setValidationError(null);\n    return true;\n  };\n  const submitSurvey = async () => {\n    if (!validateSurvey()) return;\n    try {\n      const result = await addSurvey({\n        title: surveyTitle,\n        questions\n      });\n      if (result.success) {\n        // Reset form after successful submission\n        setQuestions([]);\n        setSurveyTitle('');\n        setValidationError(null);\n        alert('Survey created successfully!');\n      } else {\n        setValidationError(result.error);\n      }\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      setValidationError('Failed to submit survey');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey-builder\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Survey Title\",\n      value: surveyTitle,\n      onChange: e => setSurveyTitle(e.target.value),\n      className: \"survey-title-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-type-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"add-multiple-choice\",\n        onClick: addMultipleChoiceQuestion,\n        children: \"Add Multiple Choice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"add-rating-scale\",\n        onClick: addRatingScaleQuestion,\n        children: \"Add Rating Scale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"add-conditional-question\",\n        onClick: addConditionalQuestion,\n        children: \"Add Conditional Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-list\",\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Question \", index + 1, \" (\", question.type, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeQuestion(index),\n            className: \"remove-question-button\",\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter question text\",\n          value: question.text,\n          onChange: e => updateQuestion(index, {\n            text: e.target.value\n          }),\n          className: \"question-text-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-details\",\n          children: [question.type === 'multiple-choice' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"multiple-choice-options\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Options:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: `Option ${optionIndex + 1}`,\n                value: option,\n                onChange: e => updateQuestionOption(index, optionIndex, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 23\n              }, this), question.options.length > 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeQuestionOption(index, optionIndex),\n                className: \"remove-option-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 25\n              }, this)]\n            }, optionIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => addQuestionOption(index),\n              className: \"add-option-button\",\n              children: \"Add Option\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this), question.type === 'rating-scale' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rating-scale-config\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Min Value:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: question.min,\n                onChange: e => updateQuestion(index, {\n                  min: parseInt(e.target.value)\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Max Value:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: question.max,\n                onChange: e => updateQuestion(index, {\n                  max: parseInt(e.target.value)\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this), question.type === 'conditional' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conditional-config\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Depends On Question:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter the text of the question this depends on\",\n                value: question.dependsOn,\n                onChange: e => updateConditionalQuestionDependency(index, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Condition:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter the required answer for the above question\",\n                value: question.condition,\n                onChange: e => updateConditionalQuestionCondition(index, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"required-checkbox\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: question.required,\n              onChange: e => updateQuestion(index, {\n                required: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this), \"Required\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), validationError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: validationError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitSurvey,\n      className: \"submit-survey-button\",\n      children: \"Save Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(SurveyBuilder, \"tldn9N/b+Zogp6rGTMHnjaUPJuQ=\");\n_c = SurveyBuilder;\nexport default SurveyBuilder;\nvar _c;\n$RefreshReg$(_c, \"SurveyBuilder\");","map":{"version":3,"names":["React","useState","addSurvey","jsxDEV","_jsxDEV","SurveyBuilder","_s","questions","setQuestions","validationError","setValidationError","surveyTitle","setSurveyTitle","addMultipleChoiceQuestion","newQuestion","type","text","options","required","addRatingScaleQuestion","min","max","addConditionalQuestion","condition","dependsOn","updateQuestion","index","updates","updatedQuestions","removeQuestion","indexToRemove","filter","_","updateQuestionOption","questionIndex","optionIndex","newOption","_updatedQuestions$que","addQuestionOption","_updatedQuestions$que2","push","removeQuestionOption","_updatedQuestions$que3","_updatedQuestions$que4","_updatedQuestions$que5","length","alert","updateConditionalQuestionDependency","dependency","_updatedQuestions$que6","updateConditionalQuestionCondition","_updatedQuestions$que7","validateSurvey","trim","requiredQuestionsMissing","some","q","submitSurvey","result","title","success","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","map","question","option","parseInt","checked","_c","$RefreshReg$"],"sources":["/Users/osman/Documents/projects/c458p1/frontend/src/SurveyBuilder.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { addSurvey } from './firebaseConfig';\n\nconst SurveyBuilder = () => {\n  const [questions, setQuestions] = useState([]);\n  const [validationError, setValidationError] = useState(null);\n  const [surveyTitle, setSurveyTitle] = useState('');\n\n  // Question type interfaces\n  const addMultipleChoiceQuestion = () => {\n    const newQuestion = {\n      type: 'multiple-choice',\n      text: '',\n      options: ['', ''],\n      required: false\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n\n  const addRatingScaleQuestion = () => {\n    const newQuestion = {\n      type: 'rating-scale',\n      text: '',\n      min: 1,\n      max: 5,\n      required: false\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n\n  const addConditionalQuestion = () => {\n    const newQuestion = {\n      type: 'conditional',\n      text: '',\n      condition: null,\n      dependsOn: null,\n      required: false\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n\n  const updateQuestion = (index, updates) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = { ...updatedQuestions[index], ...updates };\n    setQuestions(updatedQuestions);\n  };\n\n  // --- Missing Functions Start ---\n\n  const removeQuestion = (indexToRemove) => {\n    const updatedQuestions = questions.filter((_, index) => index !== indexToRemove);\n    setQuestions(updatedQuestions);\n  };\n\n  const updateQuestionOption = (questionIndex, optionIndex, newOption) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex]?.options) {\n      updatedQuestions[questionIndex].options[optionIndex] = newOption;\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  const addQuestionOption = (questionIndex) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex]?.options) {\n      updatedQuestions[questionIndex].options.push('');\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  const removeQuestionOption = (questionIndex, optionIndex) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex]?.options && updatedQuestions[questionIndex].options.length > 2) {\n      updatedQuestions[questionIndex].options = updatedQuestions[questionIndex].options.filter((_, index) => index !== optionIndex);\n      setQuestions(updatedQuestions);\n    } else if (updatedQuestions[questionIndex]?.options?.length <= 2) {\n      alert(\"Multiple choice questions must have at least two options.\");\n    }\n  };\n\n  const updateConditionalQuestionDependency = (questionIndex, dependency) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex]?.type === 'conditional') {\n      updatedQuestions[questionIndex].dependsOn = dependency;\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  const updateConditionalQuestionCondition = (questionIndex, condition) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex]?.type === 'conditional') {\n      updatedQuestions[questionIndex].condition = condition;\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  // --- Missing Functions End ---\n\n  const validateSurvey = () => {\n    // Basic validation\n    if (!surveyTitle.trim()) {\n      setValidationError('Survey must have a title');\n      return false;\n    }\n\n    const requiredQuestionsMissing = questions.some(\n      q => q.required && (!q.text || q.text.trim() === '')\n    );\n\n    if (requiredQuestionsMissing) {\n      setValidationError('Please fill in all required questions');\n      return false;\n    }\n\n    setValidationError(null);\n    return true;\n  };\n\n  const submitSurvey = async () => {\n    if (!validateSurvey()) return;\n\n    try {\n      const result = await addSurvey({\n        title: surveyTitle,\n        questions,\n      });\n\n      if (result.success) {\n        // Reset form after successful submission\n        setQuestions([]);\n        setSurveyTitle('');\n        setValidationError(null);\n        alert('Survey created successfully!');\n      } else {\n        setValidationError(result.error);\n      }\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      setValidationError('Failed to submit survey');\n    }\n  };\n\n  return (\n    <div className=\"survey-builder\">\n      <h2>Create New Survey</h2>\n\n      {/* Survey Title Input */}\n      <input\n        type=\"text\"\n        placeholder=\"Enter Survey Title\"\n        value={surveyTitle}\n        onChange={(e) => setSurveyTitle(e.target.value)}\n        className=\"survey-title-input\"\n      />\n\n      {/* Question Type Buttons */}\n      <div className=\"question-type-buttons\">\n        <button\n          data-testid=\"add-multiple-choice\"\n          onClick={addMultipleChoiceQuestion}\n        >\n          Add Multiple Choice\n        </button>\n        <button\n          data-testid=\"add-rating-scale\"\n          onClick={addRatingScaleQuestion}\n        >\n          Add Rating Scale\n        </button>\n        <button\n          data-testid=\"add-conditional-question\"\n          onClick={addConditionalQuestion}\n        >\n          Add Conditional Question\n        </button>\n      </div>\n\n      {/* Questions List */}\n      <div className=\"questions-list\">\n        {questions.map((question, index) => (\n          <div key={index} className=\"question-item\">\n            <div className=\"question-header\">\n              <h3>Question {index + 1} ({question.type})</h3>\n              <button onClick={() => removeQuestion(index)} className=\"remove-question-button\">\n                Remove\n              </button>\n            </div>\n\n            <input\n              type=\"text\"\n              placeholder=\"Enter question text\"\n              value={question.text}\n              onChange={(e) => updateQuestion(index, { text: e.target.value })}\n              className=\"question-text-input\"\n            />\n\n            <div className=\"question-details\">\n              {question.type === 'multiple-choice' && (\n                <div className=\"multiple-choice-options\">\n                  <h4>Options:</h4>\n                  {question.options.map((option, optionIndex) => (\n                    <div key={optionIndex} className=\"option-item\">\n                      <input\n                        type=\"text\"\n                        placeholder={`Option ${optionIndex + 1}`}\n                        value={option}\n                        onChange={(e) => updateQuestionOption(index, optionIndex, e.target.value)}\n                      />\n                      {question.options.length > 2 && (\n                        <button onClick={() => removeQuestionOption(index, optionIndex)} className=\"remove-option-button\">\n                          Remove\n                        </button>\n                      )}\n                    </div>\n                  ))}\n                  <button onClick={() => addQuestionOption(index)} className=\"add-option-button\">\n                    Add Option\n                  </button>\n                </div>\n              )}\n\n              {question.type === 'rating-scale' && (\n                <div className=\"rating-scale-config\">\n                  <label>\n                    Min Value:\n                    <input\n                      type=\"number\"\n                      value={question.min}\n                      onChange={(e) => updateQuestion(index, { min: parseInt(e.target.value) })}\n                    />\n                  </label>\n                  <label>\n                    Max Value:\n                    <input\n                      type=\"number\"\n                      value={question.max}\n                      onChange={(e) => updateQuestion(index, { max: parseInt(e.target.value) })}\n                    />\n                  </label>\n                </div>\n              )}\n\n              {question.type === 'conditional' && (\n                <div className=\"conditional-config\">\n                  <label>\n                    Depends On Question:\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter the text of the question this depends on\"\n                      value={question.dependsOn}\n                      onChange={(e) => updateConditionalQuestionDependency(index, e.target.value)}\n                    />\n                  </label>\n                  <label>\n                    Condition:\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter the required answer for the above question\"\n                      value={question.condition}\n                      onChange={(e) => updateConditionalQuestionCondition(index, e.target.value)}\n                    />\n                  </label>\n                </div>\n              )}\n\n              <label className=\"required-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  checked={question.required}\n                  onChange={(e) => updateQuestion(index, { required: e.target.checked })}\n                />\n                Required\n              </label>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {validationError && <p className=\"error-message\">{validationError}</p>}\n\n      <button onClick={submitSurvey} className=\"submit-survey-button\">\n        Save Survey\n      </button>\n    </div>\n  );\n};\n\nexport default SurveyBuilder;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}