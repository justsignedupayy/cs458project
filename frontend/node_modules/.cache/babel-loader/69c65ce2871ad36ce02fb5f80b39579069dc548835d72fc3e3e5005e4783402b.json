{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';\nimport { getFirestore, collection, addDoc, query, getDocs, where } from 'firebase/firestore';\n\n// Your Firebase configuration object\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Authentication functions\nconst signInWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nconst registerWithEmail = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nconst resetPassword = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Survey-related functions\nconst getSurveys = async () => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const q = query(surveysRef);\n    const querySnapshot = await getDocs(q);\n    const surveys = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    return {\n      success: true,\n      surveys\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nconst addSurvey = async surveyData => {\n  try {\n    const docRef = await addDoc(collection(db, 'surveys'), surveyData);\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport { auth, db, googleProvider, signInWithEmail, registerWithEmail, resetPassword, getSurveys, addSurvey, collection, addDoc };","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","getFirestore","collection","addDoc","query","getDocs","where","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","db","googleProvider","signInWithEmail","email","password","userCredential","success","user","error","message","registerWithEmail","resetPassword","getSurveys","surveysRef","q","querySnapshot","surveys","docs","map","doc","id","data","addSurvey","surveyData","docRef"],"sources":["/Users/denizozay/Documents/GitHub/cs458project/frontend/src/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { \n  getAuth, \n  GoogleAuthProvider, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword, \n  sendPasswordResetEmail \n} from 'firebase/auth';\nimport { \n  getFirestore, \n  collection, \n  addDoc, \n  query, \n  getDocs, \n  where \n} from 'firebase/firestore';\n\n// Your Firebase configuration object\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Authentication functions\nconst signInWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return { \n      success: true, \n      user: userCredential.user \n    };\n  } catch (error) {\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n};\n\nconst registerWithEmail = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return { \n      success: true, \n      user: userCredential.user \n    };\n  } catch (error) {\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n};\n\nconst resetPassword = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return { success: true };\n  } catch (error) {\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n};\n\n// Survey-related functions\nconst getSurveys = async () => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const q = query(surveysRef);\n    const querySnapshot = await getDocs(q);\n    \n    const surveys = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    return { \n      success: true, \n      surveys \n    };\n  } catch (error) {\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n};\n\nconst addSurvey = async (surveyData) => {\n  try {\n    const docRef = await addDoc(collection(db, 'surveys'), surveyData);\n    return { \n      success: true, \n      id: docRef.id \n    };\n  } catch (error) {\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n};\n\nexport { \n  auth, \n  db, \n  googleProvider, \n  signInWithEmail, \n  registerWithEmail, \n  resetPassword, \n  getSurveys, \n  addSurvey,\n  collection,\n  addDoc\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}