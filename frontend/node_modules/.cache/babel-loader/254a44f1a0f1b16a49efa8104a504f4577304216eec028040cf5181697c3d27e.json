{"ast":null,"code":"var _jsxFileName = \"/Users/osman/Documents/projects/c458p1/frontend/src/SurveyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSurveys, addDoc, collection, db } from './firebaseConfig';\nimport SurveyBuilder from './SurveyBuilder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurveyPage = ({\n  user\n}) => {\n  _s();\n  const [surveys, setSurveys] = useState([]);\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [submissionError, setSubmissionError] = useState(null);\n\n  // Fetch existing surveys\n  useEffect(() => {\n    const fetchSurveys = async () => {\n      try {\n        setLoading(true);\n\n        // Ensure user is authenticated\n        if (!user) {\n          throw new Error(\"User not authenticated\");\n        }\n        const result = await getSurveys();\n        if (result.success) {\n          setSurveys(result.surveys);\n          setError(null);\n        } else {\n          setError(result.error);\n        }\n      } catch (err) {\n        setError(err.message || 'Failed to fetch surveys');\n        console.error('Survey fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSurveys();\n  }, [user]);\n\n  // Handle response input\n  const handleResponseChange = (questionIndex, value) => {\n    setResponses({\n      ...responses,\n      [questionIndex]: value\n    });\n  };\n\n  // Handle survey selection\n  const handleSelectSurvey = survey => {\n    setSelectedSurvey(survey);\n    setResponses({}); // Clear previous responses when a new survey is selected\n    setSubmissionError(null);\n  };\n\n  // Render survey questions\n  const renderSurveyQuestions = () => {\n    if (!selectedSurvey) return null;\n    return selectedSurvey.questions.map((question, index) => {\n      switch (question.type) {\n        case 'multiple-choice':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [question.text, \" \", question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `question-${index}`,\n                value: option,\n                checked: responses[index] === option,\n                onChange: () => handleResponseChange(index, option),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this), option]\n            }, optIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this))]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this);\n        case 'rating-scale':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [question.text, \" \", question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: question.min || 1,\n              max: question.max || 5,\n              value: responses[index] || question.min || 1,\n              onChange: e => handleResponseChange(index, e.target.value),\n              required: question.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Rating: \", responses[index] || question.min || 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this);\n        case 'conditional':\n          const dependsOnQuestion = selectedSurvey.questions.find(q => q.text === question.dependsOn);\n          const dependsOnIndex = dependsOnQuestion ? selectedSurvey.questions.indexOf(dependsOnQuestion) : -1;\n          const shouldShowQuestion = dependsOnIndex !== -1 && responses[dependsOnIndex] === question.condition;\n          if (!shouldShowQuestion) return null;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [question.text, \" \", question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: responses[index] || '',\n              onChange: e => handleResponseChange(index, e.target.value),\n              required: question.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this);\n        default:\n          return null;\n      }\n    });\n  };\n\n  // Submit survey responses\n  const submitSurveyResponse = async () => {\n    if (!selectedSurvey) {\n      setSubmissionError(\"Please select a survey to submit.\");\n      return;\n    }\n\n    // Validate required questions\n    const requiredQuestions = selectedSurvey.questions.filter(q => q.required);\n    const allRequiredAnswered = requiredQuestions.every((question, index) => {\n      const responseKey = selectedSurvey.questions.findIndex(q => q === question);\n      return responses.hasOwnProperty(responseKey) && responses[responseKey] !== undefined && responses[responseKey] !== '';\n    });\n    if (!allRequiredAnswered) {\n      setSubmissionError(\"Please answer all required questions.\");\n      return;\n    }\n    setSubmissionError(null);\n    try {\n      if (!user) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      // Add response submission logic to Firestore\n      await addDoc(collection(db, 'survey-responses'), {\n        surveyId: selectedSurvey.id,\n        userId: user.uid,\n        responses,\n        submittedAt: new Date()\n      });\n      alert('Survey submitted successfully!');\n      // Reset form\n      setResponses({});\n      setSelectedSurvey(null);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      setSubmissionError(`Failed to submit survey: ${error.message}`);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading surveys...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please ensure you are logged in and have the necessary permissions.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Survey Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-info\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", user.displayName || user.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"survey-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Surveys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), surveys.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No surveys available. Create a new survey below!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this) : surveys.map(survey => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSelectSurvey(survey),\n        className: \"survey-select-button\",\n        children: survey.title\n      }, survey.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyBuilder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), selectedSurvey && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-survey\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Take Survey: \", selectedSurvey.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), renderSurveyQuestions(), submissionError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: submissionError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitSurveyResponse,\n        className: \"submit-survey-button\",\n        children: \"Submit Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(SurveyPage, \"YA/YIcM1Q5JrYNFLMy8/+5ym+9I=\");\n_c = SurveyPage;\nexport default SurveyPage;\nvar _c;\n$RefreshReg$(_c, \"SurveyPage\");","map":{"version":3,"names":["React","useState","useEffect","getSurveys","addDoc","collection","db","SurveyBuilder","jsxDEV","_jsxDEV","SurveyPage","user","_s","surveys","setSurveys","selectedSurvey","setSelectedSurvey","responses","setResponses","loading","setLoading","error","setError","submissionError","setSubmissionError","fetchSurveys","Error","result","success","err","message","console","handleResponseChange","questionIndex","value","handleSelectSurvey","survey","renderSurveyQuestions","questions","map","question","index","type","className","children","text","required","fileName","_jsxFileName","lineNumber","columnNumber","options","option","optIndex","name","checked","onChange","min","max","e","target","dependsOnQuestion","find","q","dependsOn","dependsOnIndex","indexOf","shouldShowQuestion","condition","submitSurveyResponse","requiredQuestions","filter","allRequiredAnswered","every","responseKey","findIndex","hasOwnProperty","undefined","surveyId","id","userId","uid","submittedAt","Date","alert","displayName","email","length","onClick","title","_c","$RefreshReg$"],"sources":["/Users/osman/Documents/projects/c458p1/frontend/src/SurveyPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  getSurveys,\n  addDoc,\n  collection,\n  db\n} from './firebaseConfig';\nimport SurveyBuilder from './SurveyBuilder';\n\nconst SurveyPage = ({ user }) => {\n  const [surveys, setSurveys] = useState([]);\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [submissionError, setSubmissionError] = useState(null);\n\n  // Fetch existing surveys\n  useEffect(() => {\n    const fetchSurveys = async () => {\n      try {\n        setLoading(true);\n\n        // Ensure user is authenticated\n        if (!user) {\n          throw new Error(\"User not authenticated\");\n        }\n\n        const result = await getSurveys();\n\n        if (result.success) {\n          setSurveys(result.surveys);\n          setError(null);\n        } else {\n          setError(result.error);\n        }\n      } catch (err) {\n        setError(err.message || 'Failed to fetch surveys');\n        console.error('Survey fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSurveys();\n  }, [user]);\n\n  // Handle response input\n  const handleResponseChange = (questionIndex, value) => {\n    setResponses({\n      ...responses,\n      [questionIndex]: value\n    });\n  };\n\n  // Handle survey selection\n  const handleSelectSurvey = (survey) => {\n    setSelectedSurvey(survey);\n    setResponses({}); // Clear previous responses when a new survey is selected\n    setSubmissionError(null);\n  };\n\n  // Render survey questions\n  const renderSurveyQuestions = () => {\n    if (!selectedSurvey) return null;\n\n    return selectedSurvey.questions.map((question, index) => {\n      switch (question.type) {\n        case 'multiple-choice':\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text} {question.required && <span className=\"required\">*</span>}</p>\n              {question.options.map((option, optIndex) => (\n                <label key={optIndex}>\n                  <input\n                    type=\"radio\"\n                    name={`question-${index}`}\n                    value={option}\n                    checked={responses[index] === option}\n                    onChange={() => handleResponseChange(index, option)}\n                    required={question.required}\n                  />\n                  {option}\n                </label>\n              ))}\n            </div>\n          );\n\n        case 'rating-scale':\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text} {question.required && <span className=\"required\">*</span>}</p>\n              <input\n                type=\"range\"\n                min={question.min || 1}\n                max={question.max || 5}\n                value={responses[index] || question.min || 1}\n                onChange={(e) => handleResponseChange(index, e.target.value)}\n                required={question.required}\n              />\n              <span>Rating: {responses[index] || question.min || 1}</span>\n            </div>\n          );\n\n        case 'conditional':\n          const dependsOnQuestion = selectedSurvey.questions.find(q => q.text === question.dependsOn);\n          const dependsOnIndex = dependsOnQuestion ? selectedSurvey.questions.indexOf(dependsOnQuestion) : -1;\n          const shouldShowQuestion = dependsOnIndex !== -1 && responses[dependsOnIndex] === question.condition;\n\n          if (!shouldShowQuestion) return null;\n\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text} {question.required && <span className=\"required\">*</span>}</p>\n              <input\n                type=\"text\"\n                value={responses[index] || ''}\n                onChange={(e) => handleResponseChange(index, e.target.value)}\n                required={question.required}\n              />\n            </div>\n          );\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  // Submit survey responses\n  const submitSurveyResponse = async () => {\n    if (!selectedSurvey) {\n      setSubmissionError(\"Please select a survey to submit.\");\n      return;\n    }\n\n    // Validate required questions\n    const requiredQuestions = selectedSurvey.questions.filter(q => q.required);\n    const allRequiredAnswered = requiredQuestions.every((question, index) => {\n      const responseKey = selectedSurvey.questions.findIndex(q => q === question);\n      return responses.hasOwnProperty(responseKey) && responses[responseKey] !== undefined && responses[responseKey] !== '';\n    });\n\n    if (!allRequiredAnswered) {\n      setSubmissionError(\"Please answer all required questions.\");\n      return;\n    }\n\n    setSubmissionError(null);\n\n    try {\n      if (!user) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      // Add response submission logic to Firestore\n      await addDoc(collection(db, 'survey-responses'), {\n        surveyId: selectedSurvey.id,\n        userId: user.uid,\n        responses,\n        submittedAt: new Date()\n      });\n\n      alert('Survey submitted successfully!');\n      // Reset form\n      setResponses({});\n      setSelectedSurvey(null);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      setSubmissionError(`Failed to submit survey: ${error.message}`);\n    }\n  };\n\n  if (loading) {\n    return <div>Loading surveys...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <p>Please ensure you are logged in and have the necessary permissions.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"survey-page\">\n      <h1>Survey Management</h1>\n\n      {/* User Information */}\n      <div className=\"user-info\">\n        <h2>Welcome, {user.displayName || user.email}</h2>\n      </div>\n\n      {/* Survey Selection */}\n      <div className=\"survey-selection\">\n        <h2>Available Surveys</h2>\n        {surveys.length === 0 ? (\n          <p>No surveys available. Create a new survey below!</p>\n        ) : (\n          surveys.map((survey) => (\n            <button\n              key={survey.id}\n              onClick={() => handleSelectSurvey(survey)}\n              className=\"survey-select-button\"\n            >\n              {survey.title}\n            </button>\n          ))\n        )}\n      </div>\n\n      {/* Survey Builder Component */}\n      <SurveyBuilder />\n\n      {/* Selected Survey Rendering */}\n      {selectedSurvey && (\n        <div className=\"selected-survey\">\n          <h2>Take Survey: {selectedSurvey.title}</h2>\n          {renderSurveyQuestions()}\n          {submissionError && <p className=\"error-message\">{submissionError}</p>}\n          <button\n            onClick={submitSurveyResponse}\n            className=\"submit-survey-button\"\n          >\n            Submit Survey\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SurveyPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}