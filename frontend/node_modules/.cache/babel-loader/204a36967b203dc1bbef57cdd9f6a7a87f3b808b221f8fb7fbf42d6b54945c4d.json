{"ast":null,"code":"var _jsxFileName = \"/Users/osman/Documents/projects/c458p1/frontend/src/SurveyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSurveys, addDoc, collection, db } from './firebaseConfig';\nimport SurveyBuilder from './SurveyBuilder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  container: {\n    maxWidth: '1000px',\n    margin: '2rem auto',\n    padding: '0 1rem',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\"\n  },\n  header: {\n    color: '#2c3e50',\n    textAlign: 'center',\n    marginBottom: '2rem'\n  },\n  userInfo: {\n    backgroundColor: '#f8f9fa',\n    padding: '1rem',\n    borderRadius: '8px',\n    marginBottom: '2rem',\n    textAlign: 'center'\n  },\n  surveyGrid: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))',\n    gap: '1rem',\n    margin: '2rem 0'\n  },\n  surveyCard: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '1.5rem',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n    cursor: 'pointer',\n    transition: 'transform 0.2s ease',\n    '&:hover': {\n      transform: 'translateY(-2px)'\n    }\n  },\n  selectedSurvey: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '2rem',\n    margin: '2rem 0',\n    boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\n  },\n  questionCard: {\n    backgroundColor: '#fff',\n    borderRadius: '8px',\n    padding: '1.5rem',\n    margin: '1rem 0',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.05)'\n  },\n  input: {\n    width: '100%',\n    padding: '0.8rem',\n    margin: '0.5rem 0',\n    border: '1px solid #ddd',\n    borderRadius: '4px',\n    fontSize: '1rem'\n  },\n  button: {\n    padding: '0.6rem 1.2rem',\n    margin: '0.5rem',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: 'all 0.3s ease'\n  },\n  primaryButton: {\n    backgroundColor: '#3498db',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: '#2980b9'\n    }\n  },\n  errorMessage: {\n    color: '#e74c3c',\n    backgroundColor: '#f8d7da',\n    padding: '1rem',\n    borderRadius: '4px',\n    margin: '1rem 0'\n  },\n  loadingText: {\n    textAlign: 'center',\n    color: '#95a5a6',\n    fontSize: '1.2rem'\n  },\n  required: {\n    color: '#e74c3c',\n    marginLeft: '0.3rem'\n  },\n  slider: {\n    width: '100%',\n    margin: '1rem 0'\n  },\n  radioOption: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '0.5rem',\n    margin: '0.5rem 0'\n  }\n};\nconst SurveyPage = ({\n  user\n}) => {\n  _s();\n  const [surveys, setSurveys] = useState([]);\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [submissionError, setSubmissionError] = useState(null);\n\n  // Fetch existing surveys\n  useEffect(() => {\n    const fetchSurveys = async () => {\n      try {\n        setLoading(true);\n\n        // Ensure user is authenticated\n        if (!user) {\n          throw new Error(\"User not authenticated\");\n        }\n        const result = await getSurveys();\n        if (result.success) {\n          setSurveys(result.surveys);\n          setError(null);\n        } else {\n          setError(result.error);\n        }\n      } catch (err) {\n        setError(err.message || 'Failed to fetch surveys');\n        console.error('Survey fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSurveys();\n  }, [user]);\n\n  // Handle response input\n  const handleResponseChange = (questionIndex, value) => {\n    setResponses({\n      ...responses,\n      [questionIndex]: value\n    });\n  };\n\n  // Handle survey selection\n  const handleSelectSurvey = survey => {\n    setSelectedSurvey(survey);\n    setResponses({}); // Clear previous responses when a new survey is selected\n    setSubmissionError(null);\n  };\n\n  // Render survey questions\n  const renderSurveyQuestions = () => {\n    if (!selectedSurvey) return null;\n    return selectedSurvey.questions.map((question, index) => {\n      switch (question.type) {\n        case 'multiple-choice':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [question.text, \" \", question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `question-${index}`,\n                value: option,\n                checked: responses[index] === option,\n                onChange: () => handleResponseChange(index, option),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), option]\n            }, optIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this))]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this);\n        case 'rating-scale':\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [question.text, \" \", question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: question.min || 1,\n              max: question.max || 5,\n              value: responses[index] || question.min || 1,\n              onChange: e => handleResponseChange(index, e.target.value),\n              required: question.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Rating: \", responses[index] || question.min || 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this);\n        case 'conditional':\n          const dependsOnQuestion = selectedSurvey.questions.find(q => q.text === question.dependsOn);\n          const dependsOnIndex = dependsOnQuestion ? selectedSurvey.questions.indexOf(dependsOnQuestion) : -1;\n          const shouldShowQuestion = dependsOnIndex !== -1 && responses[dependsOnIndex] === question.condition;\n          if (!shouldShowQuestion) return null;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"survey-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [question.text, \" \", question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: responses[index] || '',\n              onChange: e => handleResponseChange(index, e.target.value),\n              required: question.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this);\n        default:\n          return null;\n      }\n    });\n  };\n\n  // Submit survey responses\n  const submitSurveyResponse = async () => {\n    if (!selectedSurvey) {\n      setSubmissionError(\"Please select a survey to submit.\");\n      return;\n    }\n\n    // Validate required questions\n    const requiredQuestions = selectedSurvey.questions.filter(q => q.required);\n    const allRequiredAnswered = requiredQuestions.every((question, index) => {\n      const responseKey = selectedSurvey.questions.findIndex(q => q === question);\n      return responses.hasOwnProperty(responseKey) && responses[responseKey] !== undefined && responses[responseKey] !== '';\n    });\n    if (!allRequiredAnswered) {\n      setSubmissionError(\"Please answer all required questions.\");\n      return;\n    }\n    setSubmissionError(null);\n    try {\n      if (!user) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      // Add response submission logic to Firestore\n      await addDoc(collection(db, 'survey-responses'), {\n        surveyId: selectedSurvey.id,\n        userId: user.uid,\n        responses,\n        submittedAt: new Date()\n      });\n      alert('Survey submitted successfully!');\n      // Reset form\n      setResponses({});\n      setSelectedSurvey(null);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      setSubmissionError(`Failed to submit survey: ${error.message}`);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.loadingText,\n      children: \"Loading surveys...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.errorMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please ensure you are logged in and have the necessary permissions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.header,\n      children: \"Survey Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.userInfo,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", user.displayName || user.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: '1rem'\n        },\n        children: \"Available Surveys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.surveyGrid,\n        children: surveys.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: \"No surveys available. Create a new survey below!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this) : surveys.map(survey => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.surveyCard,\n            border: (selectedSurvey === null || selectedSurvey === void 0 ? void 0 : selectedSurvey.id) === survey.id ? '2px solid #3498db' : 'none'\n          },\n          onClick: () => handleSelectSurvey(survey),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: survey.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: '#95a5a6'\n            },\n            children: [survey.questions.length, \" questions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this)]\n        }, survey.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '3rem 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: '1rem'\n        },\n        children: \"Create New Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SurveyBuilder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), selectedSurvey && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.selectedSurvey,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: '1.5rem'\n        },\n        children: [\"Take Survey: \", selectedSurvey.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), selectedSurvey.questions.map((question, index) => {\n        // ... keep the existing render logic, but update JSX with styles ...\n\n        switch (question.type) {\n          case 'multiple-choice':\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.questionCard,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [question.text, question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: styles.required,\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 21\n              }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n                style: styles.radioOption,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: `question-${index}`,\n                  value: option,\n                  checked: responses[index] === option,\n                  onChange: () => handleResponseChange(index, option),\n                  required: question.required\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 25\n                }, this), option]\n              }, optIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 23\n              }, this))]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this);\n          case 'rating-scale':\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.questionCard,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [question.text, question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: styles.required,\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                style: styles.slider,\n                min: question.min || 1,\n                max: question.max || 5,\n                value: responses[index] || question.min || 1,\n                onChange: e => handleResponseChange(index, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: '#3498db',\n                  fontWeight: 'bold'\n                },\n                children: [\"Rating: \", responses[index] || question.min || 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 19\n            }, this);\n          case 'conditional':\n            // ... keep conditional logic the same ...\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                ...styles.questionCard,\n                backgroundColor: '#f8f9fa'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [question.text, question.required && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: styles.required,\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: responses[index] || '',\n                onChange: e => handleResponseChange(index, e.target.value),\n                style: styles.input,\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this);\n          default:\n            return null;\n        }\n      }), submissionError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.errorMessage,\n        children: submissionError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitSurveyResponse,\n        style: {\n          ...styles.button,\n          ...styles.primaryButton,\n          padding: '1rem 2rem',\n          fontSize: '1.1rem',\n          width: '100%',\n          marginTop: '2rem'\n        },\n        children: \"Submit Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(SurveyPage, \"YA/YIcM1Q5JrYNFLMy8/+5ym+9I=\");\n_c = SurveyPage;\nexport default SurveyPage;\nvar _c;\n$RefreshReg$(_c, \"SurveyPage\");","map":{"version":3,"names":["React","useState","useEffect","getSurveys","addDoc","collection","db","SurveyBuilder","jsxDEV","_jsxDEV","styles","container","maxWidth","margin","padding","fontFamily","header","color","textAlign","marginBottom","userInfo","backgroundColor","borderRadius","surveyGrid","display","gridTemplateColumns","gap","surveyCard","boxShadow","cursor","transition","transform","selectedSurvey","questionCard","input","width","border","fontSize","button","primaryButton","errorMessage","loadingText","required","marginLeft","slider","radioOption","alignItems","SurveyPage","user","_s","surveys","setSurveys","setSelectedSurvey","responses","setResponses","loading","setLoading","error","setError","submissionError","setSubmissionError","fetchSurveys","Error","result","success","err","message","console","handleResponseChange","questionIndex","value","handleSelectSurvey","survey","renderSurveyQuestions","questions","map","question","index","type","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","options","option","optIndex","name","checked","onChange","min","max","e","target","dependsOnQuestion","find","q","dependsOn","dependsOnIndex","indexOf","shouldShowQuestion","condition","submitSurveyResponse","requiredQuestions","filter","allRequiredAnswered","every","responseKey","findIndex","hasOwnProperty","undefined","surveyId","id","userId","uid","submittedAt","Date","alert","style","displayName","email","length","onClick","title","fontWeight","marginTop","_c","$RefreshReg$"],"sources":["/Users/osman/Documents/projects/c458p1/frontend/src/SurveyPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  getSurveys,\n  addDoc,\n  collection,\n  db\n} from './firebaseConfig';\nimport SurveyBuilder from './SurveyBuilder';\n\nconst styles = {\n  container: {\n    maxWidth: '1000px',\n    margin: '2rem auto',\n    padding: '0 1rem',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n  },\n  header: {\n    color: '#2c3e50',\n    textAlign: 'center',\n    marginBottom: '2rem',\n  },\n  userInfo: {\n    backgroundColor: '#f8f9fa',\n    padding: '1rem',\n    borderRadius: '8px',\n    marginBottom: '2rem',\n    textAlign: 'center',\n  },\n  surveyGrid: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))',\n    gap: '1rem',\n    margin: '2rem 0',\n  },\n  surveyCard: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '1.5rem',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n    cursor: 'pointer',\n    transition: 'transform 0.2s ease',\n    '&:hover': {\n      transform: 'translateY(-2px)',\n    },\n  },\n  selectedSurvey: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '2rem',\n    margin: '2rem 0',\n    boxShadow: '0 4px 6px rgba(0,0,0,0.1)',\n  },\n  questionCard: {\n    backgroundColor: '#fff',\n    borderRadius: '8px',\n    padding: '1.5rem',\n    margin: '1rem 0',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.05)',\n  },\n  input: {\n    width: '100%',\n    padding: '0.8rem',\n    margin: '0.5rem 0',\n    border: '1px solid #ddd',\n    borderRadius: '4px',\n    fontSize: '1rem',\n  },\n  button: {\n    padding: '0.6rem 1.2rem',\n    margin: '0.5rem',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: 'all 0.3s ease',\n  },\n  primaryButton: {\n    backgroundColor: '#3498db',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: '#2980b9',\n    },\n  },\n  errorMessage: {\n    color: '#e74c3c',\n    backgroundColor: '#f8d7da',\n    padding: '1rem',\n    borderRadius: '4px',\n    margin: '1rem 0',\n  },\n  loadingText: {\n    textAlign: 'center',\n    color: '#95a5a6',\n    fontSize: '1.2rem',\n  },\n  required: {\n    color: '#e74c3c',\n    marginLeft: '0.3rem',\n  },\n  slider: {\n    width: '100%',\n    margin: '1rem 0',\n  },\n  radioOption: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '0.5rem',\n    margin: '0.5rem 0',\n  },\n};\n\nconst SurveyPage = ({ user }) => {\n  const [surveys, setSurveys] = useState([]);\n  const [selectedSurvey, setSelectedSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [submissionError, setSubmissionError] = useState(null);\n\n  // Fetch existing surveys\n  useEffect(() => {\n    const fetchSurveys = async () => {\n      try {\n        setLoading(true);\n\n        // Ensure user is authenticated\n        if (!user) {\n          throw new Error(\"User not authenticated\");\n        }\n\n        const result = await getSurveys();\n\n        if (result.success) {\n          setSurveys(result.surveys);\n          setError(null);\n        } else {\n          setError(result.error);\n        }\n      } catch (err) {\n        setError(err.message || 'Failed to fetch surveys');\n        console.error('Survey fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSurveys();\n  }, [user]);\n\n  // Handle response input\n  const handleResponseChange = (questionIndex, value) => {\n    setResponses({\n      ...responses,\n      [questionIndex]: value\n    });\n  };\n\n  // Handle survey selection\n  const handleSelectSurvey = (survey) => {\n    setSelectedSurvey(survey);\n    setResponses({}); // Clear previous responses when a new survey is selected\n    setSubmissionError(null);\n  };\n\n  // Render survey questions\n  const renderSurveyQuestions = () => {\n    if (!selectedSurvey) return null;\n\n    return selectedSurvey.questions.map((question, index) => {\n      switch (question.type) {\n        case 'multiple-choice':\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text} {question.required && <span className=\"required\">*</span>}</p>\n              {question.options.map((option, optIndex) => (\n                <label key={optIndex}>\n                  <input\n                    type=\"radio\"\n                    name={`question-${index}`}\n                    value={option}\n                    checked={responses[index] === option}\n                    onChange={() => handleResponseChange(index, option)}\n                    required={question.required}\n                  />\n                  {option}\n                </label>\n              ))}\n            </div>\n          );\n\n        case 'rating-scale':\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text} {question.required && <span className=\"required\">*</span>}</p>\n              <input\n                type=\"range\"\n                min={question.min || 1}\n                max={question.max || 5}\n                value={responses[index] || question.min || 1}\n                onChange={(e) => handleResponseChange(index, e.target.value)}\n                required={question.required}\n              />\n              <span>Rating: {responses[index] || question.min || 1}</span>\n            </div>\n          );\n\n        case 'conditional':\n          const dependsOnQuestion = selectedSurvey.questions.find(q => q.text === question.dependsOn);\n          const dependsOnIndex = dependsOnQuestion ? selectedSurvey.questions.indexOf(dependsOnQuestion) : -1;\n          const shouldShowQuestion = dependsOnIndex !== -1 && responses[dependsOnIndex] === question.condition;\n\n          if (!shouldShowQuestion) return null;\n\n          return (\n            <div key={index} className=\"survey-question\">\n              <p>{question.text} {question.required && <span className=\"required\">*</span>}</p>\n              <input\n                type=\"text\"\n                value={responses[index] || ''}\n                onChange={(e) => handleResponseChange(index, e.target.value)}\n                required={question.required}\n              />\n            </div>\n          );\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  // Submit survey responses\n  const submitSurveyResponse = async () => {\n    if (!selectedSurvey) {\n      setSubmissionError(\"Please select a survey to submit.\");\n      return;\n    }\n\n    // Validate required questions\n    const requiredQuestions = selectedSurvey.questions.filter(q => q.required);\n    const allRequiredAnswered = requiredQuestions.every((question, index) => {\n      const responseKey = selectedSurvey.questions.findIndex(q => q === question);\n      return responses.hasOwnProperty(responseKey) && responses[responseKey] !== undefined && responses[responseKey] !== '';\n    });\n\n    if (!allRequiredAnswered) {\n      setSubmissionError(\"Please answer all required questions.\");\n      return;\n    }\n\n    setSubmissionError(null);\n\n    try {\n      if (!user) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      // Add response submission logic to Firestore\n      await addDoc(collection(db, 'survey-responses'), {\n        surveyId: selectedSurvey.id,\n        userId: user.uid,\n        responses,\n        submittedAt: new Date()\n      });\n\n      alert('Survey submitted successfully!');\n      // Reset form\n      setResponses({});\n      setSelectedSurvey(null);\n    } catch (error) {\n      console.error('Error submitting survey:', error);\n      setSubmissionError(`Failed to submit survey: ${error.message}`);\n    }\n  };\n\n  if (loading) {\n    return <div style={styles.loadingText}>Loading surveys...</div>;\n  }\n\n  if (error) {\n    return (\n      <div style={styles.container}>\n        <div style={styles.errorMessage}>\n          <h2>Error</h2>\n          <p>{error}</p>\n          <p>Please ensure you are logged in and have the necessary permissions.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.header}>Survey Management</h1>\n\n      {/* User Information */}\n      <div style={styles.userInfo}>\n        <h2>Welcome, {user.displayName || user.email}</h2>\n      </div>\n\n      {/* Survey Selection */}\n      <div>\n        <h2 style={{ marginBottom: '1rem' }}>Available Surveys</h2>\n        <div style={styles.surveyGrid}>\n          {surveys.length === 0 ? (\n            <p style={{ textAlign: 'center' }}>No surveys available. Create a new survey below!</p>\n          ) : (\n            surveys.map((survey) => (\n              <div\n                key={survey.id}\n                style={{\n                  ...styles.surveyCard,\n                  border: selectedSurvey?.id === survey.id ? '2px solid #3498db' : 'none'\n                }}\n                onClick={() => handleSelectSurvey(survey)}\n              >\n                <h3>{survey.title}</h3>\n                <p style={{ color: '#95a5a6' }}>\n                  {survey.questions.length} questions\n                </p>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Survey Builder Component */}\n      <div style={{ margin: '3rem 0' }}>\n        <h2 style={{ marginBottom: '1rem' }}>Create New Survey</h2>\n        <SurveyBuilder />\n      </div>\n\n      {/* Selected Survey Rendering */}\n      {selectedSurvey && (\n        <div style={styles.selectedSurvey}>\n          <h2 style={{ marginBottom: '1.5rem' }}>Take Survey: {selectedSurvey.title}</h2>\n          \n          {selectedSurvey.questions.map((question, index) => {\n            // ... keep the existing render logic, but update JSX with styles ...\n\n            switch (question.type) {\n              case 'multiple-choice':\n                return (\n                  <div key={index} style={styles.questionCard}>\n                    <p>\n                      {question.text}\n                      {question.required && <span style={styles.required}>*</span>}\n                    </p>\n                    {question.options.map((option, optIndex) => (\n                      <label key={optIndex} style={styles.radioOption}>\n                        <input\n                          type=\"radio\"\n                          name={`question-${index}`}\n                          value={option}\n                          checked={responses[index] === option}\n                          onChange={() => handleResponseChange(index, option)}\n                          required={question.required}\n                        />\n                        {option}\n                      </label>\n                    ))}\n                  </div>\n                );\n\n              case 'rating-scale':\n                return (\n                  <div key={index} style={styles.questionCard}>\n                    <p>\n                      {question.text}\n                      {question.required && <span style={styles.required}>*</span>}\n                    </p>\n                    <input\n                      type=\"range\"\n                      style={styles.slider}\n                      min={question.min || 1}\n                      max={question.max || 5}\n                      value={responses[index] || question.min || 1}\n                      onChange={(e) => handleResponseChange(index, e.target.value)}\n                    />\n                    <div style={{ color: '#3498db', fontWeight: 'bold' }}>\n                      Rating: {responses[index] || question.min || 1}\n                    </div>\n                  </div>\n                );\n\n              case 'conditional':\n                // ... keep conditional logic the same ...\n                return (\n                  <div key={index} style={{ ...styles.questionCard, backgroundColor: '#f8f9fa' }}>\n                    <p>\n                      {question.text}\n                      {question.required && <span style={styles.required}>*</span>}\n                    </p>\n                    <input\n                      type=\"text\"\n                      value={responses[index] || ''}\n                      onChange={(e) => handleResponseChange(index, e.target.value)}\n                      style={styles.input}\n                      required={question.required}\n                    />\n                  </div>\n                );\n\n              default:\n                return null;\n            }\n          })}\n\n          {submissionError && (\n            <div style={styles.errorMessage}>\n              {submissionError}\n            </div>\n          )}\n\n          <button\n            onClick={submitSurveyResponse}\n            style={{\n              ...styles.button,\n              ...styles.primaryButton,\n              padding: '1rem 2rem',\n              fontSize: '1.1rem',\n              width: '100%',\n              marginTop: '2rem'\n            }}\n          >\n            Submit Survey\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SurveyPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}