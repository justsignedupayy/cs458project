{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail } from \"firebase/auth\";\nimport { getFirestore, collection, addDoc, getDocs, query, where } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjE1uvLm11OkSZ1EEHwlFatphAcHUelGE\",\n  authDomain: \"cs458-c77f5.firebaseapp.com\",\n  projectId: \"cs458-c77f5\",\n  storageBucket: \"cs458-c77f5.firebasestorage.app\",\n  messagingSenderId: \"273785606312\",\n  appId: \"1:273785606312:web:5ef6665350622390c2f29d\",\n  measurementId: \"G-003GYRGNNK\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Authentication and Firestore exports\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const googleProvider = new GoogleAuthProvider();\n\n// Authentication Methods\nexport const signInWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log(\"User signed in:\", userCredential.user);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    let errorMessage = \"An unknown error occurred.\";\n\n    // Check Firebase's raw error message\n    if (error.code === \"auth/invalid-credential\") {\n      errorMessage = \"Invalid email or password. Please try again.\";\n    } else {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          errorMessage = \"No account found with this email.\";\n          break;\n        case \"auth/wrong-password\":\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case \"auth/invalid-email\":\n          errorMessage = \"Invalid email format.\";\n          break;\n        case \"auth/too-many-requests\":\n          errorMessage = \"Too many failed attempts. Try again later.\";\n          break;\n        case \"auth/network-request-failed\":\n          errorMessage = \"Network error. Please check your connection.\";\n          break;\n        default:\n          errorMessage = error.message;\n      }\n    }\n    console.error(\"Email/Password Sign-In Error:\", errorMessage);\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\n\n// User Registration Method\nexport const registerWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    console.log(\"User registered:\", userCredential.user);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    let errorMessage = \"Registration failed.\";\n    switch (error.code) {\n      case \"auth/email-already-in-use\":\n        errorMessage = \"Email is already registered.\";\n        break;\n      case \"auth/invalid-email\":\n        errorMessage = \"Invalid email format.\";\n        break;\n      case \"auth/weak-password\":\n        errorMessage = \"Password is too weak. Please choose a stronger password.\";\n        break;\n      default:\n        errorMessage = error.message;\n    }\n    console.error(\"Email/Password Registration Error:\", errorMessage);\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\n\n// Password Reset Method\nexport const resetPassword = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return {\n      success: true,\n      message: \"Password reset email sent.\"\n    };\n  } catch (error) {\n    let errorMessage = \"Password reset failed.\";\n    switch (error.code) {\n      case \"auth/invalid-email\":\n        errorMessage = \"Invalid email format.\";\n        break;\n      case \"auth/user-not-found\":\n        errorMessage = \"No account found with this email.\";\n        break;\n      default:\n        errorMessage = error.message;\n    }\n    console.error(\"Password Reset Error:\", errorMessage);\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\n\n// Firestore Utility Methods\nexport const addSurvey = async surveyData => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const docRef = await addDoc(surveysRef, {\n      ...surveyData,\n      createdAt: new Date()\n    });\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    console.error(\"Error adding survey:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const getSurveys = async () => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const querySnapshot = await getDocs(surveysRef);\n    const surveys = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    return {\n      success: true,\n      surveys\n    };\n  } catch (error) {\n    console.error(\"Error fetching surveys:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","getFirestore","collection","addDoc","getDocs","query","where","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithEmail","email","password","Error","userCredential","console","log","user","success","error","errorMessage","code","message","registerWithEmail","resetPassword","addSurvey","surveyData","surveysRef","docRef","createdAt","Date","id","getSurveys","querySnapshot","surveys","docs","map","doc","data"],"sources":["/Users/denizozay/Documents/GitHub/cs458project/frontend/src/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n} from \"firebase/auth\";\nimport { \n  getFirestore, \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  where \n} from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjE1uvLm11OkSZ1EEHwlFatphAcHUelGE\",\n  authDomain: \"cs458-c77f5.firebaseapp.com\",\n  projectId: \"cs458-c77f5\",\n  storageBucket: \"cs458-c77f5.firebasestorage.app\",\n  messagingSenderId: \"273785606312\",\n  appId: \"1:273785606312:web:5ef6665350622390c2f29d\",\n  measurementId: \"G-003GYRGNNK\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Authentication and Firestore exports\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const googleProvider = new GoogleAuthProvider();\n\n// Authentication Methods\nexport const signInWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log(\"User signed in:\", userCredential.user);\n    return { success: true, user: userCredential.user };\n  } catch (error) {\n    let errorMessage = \"An unknown error occurred.\";\n\n    // Check Firebase's raw error message\n    if (error.code === \"auth/invalid-credential\") {\n      errorMessage = \"Invalid email or password. Please try again.\";\n    } else {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          errorMessage = \"No account found with this email.\";\n          break;\n        case \"auth/wrong-password\":\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case \"auth/invalid-email\":\n          errorMessage = \"Invalid email format.\";\n          break;\n        case \"auth/too-many-requests\":\n          errorMessage = \"Too many failed attempts. Try again later.\";\n          break;\n        case \"auth/network-request-failed\":\n          errorMessage = \"Network error. Please check your connection.\";\n          break;\n        default:\n          errorMessage = error.message;\n      }\n    }\n\n    console.error(\"Email/Password Sign-In Error:\", errorMessage);\n    return { success: false, error: errorMessage };\n  }\n};\n\n// User Registration Method\nexport const registerWithEmail = async (email, password) => {\n  try {\n    if (!email || !password) {\n      throw new Error(\"Email and password cannot be empty.\");\n    }\n    \n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    console.log(\"User registered:\", userCredential.user);\n    return { success: true, user: userCredential.user };\n  } catch (error) {\n    let errorMessage = \"Registration failed.\";\n\n    switch (error.code) {\n      case \"auth/email-already-in-use\":\n        errorMessage = \"Email is already registered.\";\n        break;\n      case \"auth/invalid-email\":\n        errorMessage = \"Invalid email format.\";\n        break;\n      case \"auth/weak-password\":\n        errorMessage = \"Password is too weak. Please choose a stronger password.\";\n        break;\n      default:\n        errorMessage = error.message;\n    }\n\n    console.error(\"Email/Password Registration Error:\", errorMessage);\n    return { success: false, error: errorMessage };\n  }\n};\n\n// Password Reset Method\nexport const resetPassword = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return { success: true, message: \"Password reset email sent.\" };\n  } catch (error) {\n    let errorMessage = \"Password reset failed.\";\n\n    switch (error.code) {\n      case \"auth/invalid-email\":\n        errorMessage = \"Invalid email format.\";\n        break;\n      case \"auth/user-not-found\":\n        errorMessage = \"No account found with this email.\";\n        break;\n      default:\n        errorMessage = error.message;\n    }\n\n    console.error(\"Password Reset Error:\", errorMessage);\n    return { success: false, error: errorMessage };\n  }\n};\n\n// Firestore Utility Methods\nexport const addSurvey = async (surveyData) => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const docRef = await addDoc(surveysRef, {\n      ...surveyData,\n      createdAt: new Date()\n    });\n    return { success: true, id: docRef.id };\n  } catch (error) {\n    console.error(\"Error adding survey:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\nexport const getSurveys = async () => {\n  try {\n    const surveysRef = collection(db, 'surveys');\n    const querySnapshot = await getDocs(surveysRef);\n    \n    const surveys = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    return { success: true, surveys };\n  } catch (error) {\n    console.error(\"Error fetching surveys:\", error);\n    return { success: false, error: error.message };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}